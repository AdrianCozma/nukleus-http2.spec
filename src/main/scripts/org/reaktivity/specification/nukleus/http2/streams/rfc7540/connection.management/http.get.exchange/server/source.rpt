#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newSourceInputRef ${nuklei:newReferenceId()} # external scope

property nuklei ${nuklei:directory("target/nukleus-itests").streamsCapacity(1024 * 1024, 64 * 1024)}

property sourceInput ${nuklei.streams("http2", "source")}

property newSourceInputId ${nuklei:newStreamId()}
property newSourceCorrelationId ${nuklei:newCorrelationId()}
property sourceHandshake ${nuklei.streams("source", "http2#source")}
property targetOutputEst ${nuklei.streams("http2", "target")}
property sourceOutputEst ${nuklei.streams("source", "http2#target")}


#
#
# writing to source-->nukleus (http2/source)
#
#
connect await ROUTED_INPUT
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceInput.throttle)}
        option writer ${agrona:oneToOneWriter(sourceInput.buffer)}
connected

# begin frame
write [0x00 0x00 0x00 0x01]
write ${newSourceInputId}
write ${newSourceInputRef}
write ${newSourceCorrelationId}
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceInputId}
read [0..4]

# data frame (http2 client connection preface)
write [0x00 0x00 0x00 0x02]
write ${newSourceInputId}
write [0x00 0x18]
write "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n"
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceInputId}
read [0..4]

# data frame (http2 SETTINGS frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceInputId}
write [0x00 0x0f]
# SETTINGS frame <length=6, flags=0x00, stream_id=0> (niv=1) [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]
write [0x00 0x00 0x06 0x04 0x00 0x00 0x00 0x00 0x00 0x00 0x04 0x00 0x00 0xff 0xff]
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceInputId}
read [0..4]

# data frame (http2 SETTINGS frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceInputId}
write [0x00 0x09]
# SETTINGS frame <length=0, flags=0x01, stream_id=0> ; ACK (niv=0)
write [0x00 0x00 0x00 0x04 0x01 0x00 0x00 0x00 0x00]
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceInputId}
read [0..4]

# data frame (http2 HEADERS frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceInputId}
write [0x00 0x18]
# HEADERS frame <length=15, flags=0x05, stream_id=1> ; END_STREAM | END_HEADERS (padlen=0) ; Open new stream
# :method: GET
# :scheme: http
# :path: /
# :authority: localhost:8080
write [0x00 0x00 0x0f 0x01 0x05 0x00 0x00 0x00 0x01 0x82 0x86 0x84 0x41 0x8a 0xa0 0xe4 0x1d 0x13 0x9d 0x09 0xb8 0xf0 0x1e 0x07]
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceInputId}
read [0..4]

close
closed




#
#
# reading from source-->nukleus-->source (source/http2#source)
#
#
connect
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceHandshake.buffer)}
        option writer ${agrona:oneToOneWriter(sourceHandshake.throttle)}
connected

# begin frame
read [0x00 0x00 0x00 0x01]
read ([0..8]:sourceHandshakeId)
read [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
read ${newSourceCorrelationId}

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceHandshakeId}
write [0x00 0x02 0x00 0x00]
write flush

# data frame (server connection preface - SETTINGS frame)
read [0x00 0x00 0x00 0x02]
read ${sourceHandshakeId}
read [0x00 0x0F]
# HTTP2 SETTINGS frame <length=6, flags=0x00, stream_id=0> (niv=1) [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]
read [0x00 0x00 0x06 0x04 0x00 0x00 0x00 0x00 0x00 0x00 0x03 0x00 0x00 0x00 0x64]

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceHandshakeId}
write [0x13 0x00 0x00 0x00]
write flush

# data frame (http2 SETTINGS frame)
read [0x00 0x00 0x00 0x02]
read ${sourceHandshakeId}
read [0x00 0x09]
# SETTINGS frame <length=0, flags=0x01, stream_id=0> ; ACK (niv=0)
read [0x00 0x00 0x00 0x04 0x01 0x00 0x00 0x00 0x00]

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceHandshakeId}
write [0x17 0x00 0x00 0x00]
write flush

close
closed


#
#
# reading from target-->nukleus-->source (source/http2#target)
#
#
connect await ROUTED_OUTPUT
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceOutputEst.buffer)}
        option writer ${agrona:oneToOneWriter(sourceOutputEst.throttle)}
connected

# begin frame
read [0x00 0x00 0x00 0x01]
read ([0..8]:sourceOutputEstId)
read [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
read ${newSourceCorrelationId}

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceOutputEstId}
write [0x00 0x02 0x00 0x00]
write flush

# nuklei data frame (contains http2 headers frame)
read [0x00 0x00 0x00 0x02]
read ${sourceOutputEstId}
read [0x00 0x64]
# HEADERS frame <length=69, flags=0x04, stream_id=1>
#          ; END_HEADERS
#          (padlen=0)
#          ; First response header
#          :status: 404
#          server: nghttpd nghttp2/1.19.0
#          date: Wed, 01 Feb 2017 19:12:46 GMT
#          content-type: text/html; charset=UTF-8
#          content-length: 147
read      [0x00 0x00 0x5b 0x01 0x04 0x00 0x00 0x00 0x01]
          [0x8d 0x0f 0x27 0x16 0x6e 0x67 0x68 0x74 0x74 0x70 0x64 0x20 0x6e 0x67 0x68 0x74]
          [0x74 0x70 0x32 0x2f 0x31 0x2e 0x31 0x39 0x2e 0x30 0x0f 0x12 0x1d 0x57 0x65 0x64]
          [0x2c 0x20 0x30 0x31 0x20 0x46 0x65 0x62 0x20 0x32 0x30 0x31 0x37 0x20 0x31 0x39]
          [0x3a 0x31 0x32 0x3a 0x34 0x36 0x20 0x47 0x4d 0x54 0x0f 0x10 0x18 0x74 0x65 0x78]
          [0x74 0x2f 0x68 0x74 0x6d 0x6c 0x3b 0x20 0x63 0x68 0x61 0x72 0x73 0x65 0x74 0x3d]
          [0x55 0x54 0x46 0x2d 0x38 0x0f 0x0d 0x03 0x31 0x34 0x37]

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceOutputEstId}
write [0x00 0x02 0x00 0x00]
write flush

# nuklei data frame (contains http2 data frame)
read [0x00 0x00 0x00 0x02]
read ${sourceOutputEstId}
read [0x00 0x9c]
# DATA frame <length=147, flags=0x01, stream_id=1>
#          ; END_STREAM
# <html><head><title>404 Not Found</title></head><body><h1>404 Not Found</h1><hr><address>nghttpd nghttp2/1.19.0 at port 8080</address></body></html>
read [0x00 0x00]
     [0x93 0x00 0x01 0x00 0x00 0x00 0x01 0x3c 0x68 0x74 0x6d 0x6c 0x3e 0x3c 0x68 0x65]
     [0x61 0x64 0x3e 0x3c 0x74 0x69 0x74 0x6c 0x65 0x3e 0x34 0x30 0x34 0x20 0x4e 0x6f]
     [0x74 0x20 0x46 0x6f 0x75 0x6e 0x64 0x3c 0x2f 0x74 0x69 0x74 0x6c 0x65 0x3e 0x3c]
     [0x2f 0x68 0x65 0x61 0x64 0x3e 0x3c 0x62 0x6f 0x64 0x79 0x3e 0x3c 0x68 0x31 0x3e]
     [0x34 0x30 0x34 0x20 0x4e 0x6f 0x74 0x20 0x46 0x6f 0x75 0x6e 0x64 0x3c 0x2f 0x68]
     [0x31 0x3e 0x3c 0x68 0x72 0x3e 0x3c 0x61 0x64 0x64 0x72 0x65 0x73 0x73 0x3e 0x6e]
     [0x67 0x68 0x74 0x74 0x70 0x64 0x20 0x6e 0x67 0x68 0x74 0x74 0x70 0x32 0x2f 0x31]
     [0x2e 0x31 0x39 0x2e 0x30 0x20 0x61 0x74 0x20 0x70 0x6f 0x72 0x74 0x20 0x38 0x30]
     [0x38 0x30 0x3c 0x2f 0x61 0x64 0x64 0x72 0x65 0x73 0x73 0x3e 0x3c 0x2f 0x62 0x6f]
     [0x64 0x79 0x3e 0x3c 0x2f 0x68 0x74 0x6d 0x6c 0x3e]

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceOutputEstId}
write [0x13 0x00 0x00 0x00]
write flush

close
closed
