#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property nuklei ${nuklei:directory("target/nukleus-itests").streamsCapacity(1024 * 1024, 64 * 1024)}

property sourceInput ${nuklei.streams("http2", "source")}
property sourceHandshakeEst ${nuklei.streams("source", "http2#source")}

property newSourceHandshakeId ${nuklei:newStreamId()}

connect await ROUTED_INPUT
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceInput.buffer)}
        option writer ${agrona:oneToOneWriter(sourceInput.throttle)}
connected

read [0x00 0x00 0x00 0x01]
read ([0..8]:sourceInputId)
read ([0..8]:sourceInputRef)
read ([0..8]:sourceCorrelationId)

write [0x40 0x00 0x00 0x02]
write ${sourceInputId}
write [0x00 0x02 0x00 0x00]
write flush

read [0x00 0x00 0x00 0x02]
read ${sourceInputId}
read [0x00 0x18]
read "PRI * HTTP/2.0\r\n"
      "\r\n"
      "SM\r\n"
      "\r\n"

write notify CLIENT_PREFACE_RECEIVED

write [0x40 0x00 0x00 0x02]
write ${sourceInputId}
write [0x50 0x00 0x00 0x00]
write flush

close
closed



connect await CLIENT_PREFACE_RECEIVED
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceHandshakeEst.throttle)}
        option writer ${agrona:oneToOneWriter(sourceHandshakeEst.buffer)}
connected

write [0x00 0x00 0x00 0x01]
write ${newSourceHandshakeId}
write [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
write ${sourceCorrelationId}
write flush

read [0x40 0x00 0x00 0x02]
read ${newSourceHandshakeId}
read [0..4]

write [0x00 0x00 0x00 0x02]
write ${newSourceHandshakeId}
write [0x00 0x0F]
write [0x00 0x00 0x06]                  # length = 6
      [0x04]                            # HTTP2 SETTINGS frame
      [0x00]                            # flags = 0x00
      [0x00 0x00 0x00 0x00]             # stream_id = 0
      [0x00 0x03 0x00 0x00 0x00 0x64]   # SETTINGS_MAX_CONCURRENT_STREAMS(0x03) = 100
write flush

read [0x40 0x00 0x00 0x02]
read ${newSourceHandshakeId}
read [0..4]

close
closed
