#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newTargetInputRef ${nuklei:newReferenceId()} # external scope

property nuklei ${nuklei:directory("target/nukleus-itests").streamsCapacity(1024 * 1024, 64 * 1024)}

property sourceInput ${nuklei.streams("http2", "source")}
property sourceHandshakeEst ${nuklei.streams("source", "http2#source")}
property targetInput ${nuklei.streams("target", "http2#source")}
property targetOutputEst ${nuklei.streams("http2", "target")}
property sourceOutputEst ${nuklei.streams("source", "http2#target")}

property newTargetInputId1 ${nuklei:newStreamId()}
property newTargetInputId2 ${nuklei:newStreamId()}
property newTargetInputId3 ${nuklei:newStreamId()}

property newTargetCorrelationId1 ${nuklei:newCorrelationId()}
property newTargetCorrelationId2 ${nuklei:newCorrelationId()}
property newTargetCorrelationId3 ${nuklei:newCorrelationId()}

property newSourceOutputEstId ${nuklei:newStreamId()}

#
#
# reading from source-->nukleus (http2/source)
#
#
connect await ROUTED_INPUT
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceInput.buffer)}
        option writer ${agrona:oneToOneWriter(sourceInput.throttle)}
connected

# begin frame
read [0x00 0x00 0x00 0x01]
read ([0..8]:sourceInputId)
read ([0..8]:sourceInputRef)
read ([0..8]:sourceCorrelationId)

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceInputId}
write [0x00 0x02 0x00 0x00]
write flush

# data frame (http2 client connection preface)
read [0x00 0x00 0x00 0x02]
read ${sourceInputId}
read [0x00 0x18]
read "PRI * HTTP/2.0\r\n"
     "\r\n"
     "SM\r\n"
     "\r\n"

read notify CONNECTION_ESTABLISHED

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceInputId}
write [0x00 0x02 0x00 0x00]
write flush

# data frame (http2 SETTINGS frame)
read [0x00 0x00 0x00 0x02]
read ${sourceInputId}
read [0x00 0x0f]
read [0x00 0x00 0x06]                   # length = 6
     [0x04]                             # HTTP2 SETTINGS frame
     [0x00]                             # flags = 0x00
     [0x00 0x00 0x00 0x00]              # stream_id = 0
     [0x00 0x04 0x00 0x00 0xff 0xff]    # SETTINGS_INITIAL_WINDOW_SIZE(0x04) = 65535

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceInputId}
write [0x00 0x02 0x00 0x00]
write flush

# data frame (http2 SETTINGS frame)
read [0x00 0x00 0x00 0x02]
read ${sourceInputId}
read [0x00 0x09]
read [0x00 0x00 0x00]           # length = 0
     [0x04]                     # HTTP2 SETTINGS frame
     [0x01]                     # ACK
     [0x00 0x00 0x00 0x00]      # stream_id = 0

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceInputId}
write [0x00 0x02 0x00 0x00]
write flush

# data frame - HTTP2 HEADERS frame stream_id=1
read [0x00 0x00 0x00 0x02]
read ${sourceInputId}
read [0x00 0x1c]
read [0x00 0x00 0x13]                   # length = 19
     [0x01]                             # HEADERS frame
     [0x05]                             # END_STREAM | END_HEADERS
     [0x00 0x00 0x00 0x01]              # stream_id = 1
     [0x83]                             # :method: POST
     [0x86]                             # :scheme: http
     [0x84]                             # :path: /
     [0x01] [0x0e] "localhost:8080"     # :authority: localhost:8080


# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceInputId}
write [0x00 0x02 0x00 0x00]
write flush

# data frame - HTTP2 DATA frame stream_id=1
read [0x00 0x00 0x00 0x02]
read ${newSourceInputId}
read [0x00 0x15]
read [0x00 0x00 0x0c]                   # length = 12
     [0x00]                             # HTTP2 DATA frame
     [0x01]                             # END_STREAM
     [0x00 0x00 0x00 0x01]              # stream_id = 1
     "Hello, world"

read notify HTTP_REQUEST_DECODED

# window frame
write [0x40 0x00 0x00 0x02]
write ${sourceInputId}
write [0x00 0x02 0x00 0x00]
write flush

close
closed


#
#
# writing to source-->nukleus-->source (source/http2#source)
#
#
connect await CONNECTION_ESTABLISHED
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceHandshakeEst.throttle)}
        option writer ${agrona:oneToOneWriter(sourceHandshakeEst.buffer)}
connected

# begin frame
write [0x00 0x00 0x00 0x01]
write ${newSourceOutputEstId}
write [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
write ${sourceCorrelationId}
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0..4]

# data frame (server connection preface - SETTINGS frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceOutputEstId}
write [0x00 0x0F]
write [0x00 0x00 0x06]                   # length = 6
      [0x04]                             # HTTP2 SETTINGS frame
      [0x00]                             # flags = 0x00
      [0x00 0x00 0x00 0x00]              # stream_id = 0
      [0x00 0x03] [0x00 0x00 0x00 0x64]  # SETTINGS_MAX_CONCURRENT_STREAMS(0x03) = 100
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0..4]

# data frame (http2 SETTINGS frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceOutputEstId}
write [0x00 0x09]
write [0x00 0x00 0x00]           # length = 0
      [0x04]                     # HTTP2 SETTINGS frame
      [0x01]                     # ACK
      [0x00 0x00 0x00 0x00]      # stream_id = 0
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0x17 0x00 0x00 0x00]

close
closed


#
#
# writing to nukleus-->target (target/http2#source)
#
#
connect await HTTP_REQUEST_DECODED
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(targetInput.throttle)}
        option writer ${agrona:oneToOneWriter(targetInput.buffer)}
connected


# ========================== target input stream 1 =====================
write [0x00 0x00 0x00 0x01]
write ${newTargetInputId1}
write ${newTargetInputRef}
write ${newTargetCorrelationId1}
write [0x00] [0x07] ":method" [0x04] "POST"
write [0x00] [0x07] ":scheme" [0x04] "http"
write [0x00] [0x05] ":path" [0x01] "/"
write [0x00] [0x0a] ":authority" [0x0e] "localhost:8080"
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newTargetInputId1}
read [0..4]

write [0x00 0x00 0x00 0x02]
write ${newTargetInputId1}
write [0x00 0x0c]
write "Hello, world"
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newTargetInputId1}
read [0..4]

# ========= target input stream 2 (promised request 1)  =============
write [0x00 0x00 0x00 0x01]
write ${newTargetInputId2}
write ${newTargetInputRef}
write ${newTargetCorrelationId2}
write [0x00] [0x07] ":method" [0x03] "GET"
write [0x00] [0x07] ":scheme" [0x04] "http"
write [0x00] [0x05] ":path" [0x0a] "/resource1"
write [0x00] [0x0a] ":authority" [0x0e] "localhost:8080"
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newTargetInputId2}
read [0..4]

# ========= target input stream 2 (promised request 2)  =============
write [0x00 0x00 0x00 0x01]
write ${newTargetInputId3}
write ${newTargetInputRef}
write ${newTargetCorrelationId3}
write [0x00] [0x07] ":method" [0x03] "GET"
write [0x00] [0x07] ":scheme" [0x04] "http"
write [0x00] [0x05] ":path" [0x0a] "/resource2"
write [0x00] [0x0a] ":authority" [0x0e] "localhost:8080"
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newTargetInputId3}
read [0..4]


#
#
# reading from target-->nukleus (http2/target)
#
#
connect await ROUTED_OUTPUT
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(targetOutputEst.buffer)}
        option writer ${agrona:oneToOneWriter(targetOutputEst.throttle)}
connected

# ========================== target output stream 1 =====================
# begin frame (with http headers)
read [0x00 0x00 0x00 0x01]
read ([0..8]:targetOutputEstId1)
read [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
read ${newTargetCorrelationId1}
read [0x00] [0x07] ":status" [0x03] "200"
read [0x00] [0x06] "server" [0x14] "CERN/3.0 libwww/2.17"
read [0x00] [0x04] "date" [0x1d] "Wed, 01 Feb 2017 19:12:46 GMT"
read [0x00] [0x0c] "content-type" [0x18] "text/html; charset=UTF-8"
read [0x00] [0x0e] "content-length" [0x02] "61"

read notify HTTP_RESPONSE_HEADERS_RECEIVED

# window frame
write [0x40 0x00 0x00 0x02]
write ${targetOutputEstId1}
write [0x00 0x02 0x00 0x00]
write flush

# data frame (with http payload with push promise ext)
read [0x00 0x00 0x00 0x02]
read ${targetOutputEstId1}
read [0x00 0x00]
read [0x00] [0x07] ":method" [0x03] "GET"
read [0x00] [0x07] ":scheme" [0x04] "http"
read [0x00] [0x05] ":path" [0x0a] "/resource1"
read [0x00] [0x0a] ":authority" [0x0e] "localhost:8080"

# window frame
write [0x40 0x00 0x00 0x02]
write ${targetOutputEstId1}
write [0x00 0x02 0x00 0x00]
write flush

# data frame (with http payload with push promise ext)
read [0x00 0x00 0x00 0x02]
read ${targetOutputEstId1}
read [0x00 0x00]
read [0x00] [0x07] ":method" [0x03] "GET"
read [0x00] [0x07] ":scheme" [0x04] "http"
read [0x00] [0x05] ":path" [0x0a] "/resource2"
read [0x00] [0x0a] ":authority" [0x0e] "localhost:8080"

# window frame
write [0x40 0x00 0x00 0x02]
write ${targetOutputEstId1}
write [0x00 0x02 0x00 0x00]
write flush

# data frame (with http payload)
read [0x00 0x00 0x00 0x02]
read ${targetOutputEstId1}
read [0x00 0x3d]
read "<html><head></head><body><h1>404 Not Found</h1></body></html>"

read notify HTTP_RESPONSE_PAYLOAD_RECEIVED

# window frame
write [0x40 0x00 0x00 0x02]
write ${targetOutputEstId1}
write [0x00 0x02 0x00 0x00]
write flush

# ========================== target output stream 2 =====================
# begin frame (with http headers)
read [0x00 0x00 0x00 0x01]
read ([0..8]:targetOutputEstId2)
read [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
read ${newTargetCorrelationId2}
read [0x00] [0x07] ":status" [0x03] "200"
read [0x00] [0x06] "server" [0x14] "CERN/3.0 libwww/2.17"
read [0x00] [0x04] "date" [0x1d] "Wed, 01 Feb 2017 19:12:46 GMT"
read [0x00] [0x0c] "content-type" [0x18] "text/html; charset=UTF-8"
read [0x00] [0x0e] "content-length" [0x02] "61"

# window frame
write [0x40 0x00 0x00 0x02]
write ${targetOutputEstId2}
write [0x00 0x02 0x00 0x00]
write flush

# data frame (with http payload)
read [0x00 0x00 0x00 0x02]
read ${targetOutputEstId2}
read [0x00 0x3e]
read "<html><head></head><body><h1>Push Response1</h1></body></html>"

# window frame
write [0x40 0x00 0x00 0x02]
write ${targetOutputEstId2}
write [0x00 0x02 0x00 0x00]
write flush

# ========================== target output stream 3 =====================
# begin frame (with http headers)
read [0x00 0x00 0x00 0x01]
read ([0..8]:targetOutputEstId3)
read [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
read ${newTargetCorrelationId3}
read [0x00] [0x07] ":status" [0x03] "200"
read [0x00] [0x06] "server" [0x14] "CERN/3.0 libwww/2.17"
read [0x00] [0x04] "date" [0x1d] "Wed, 01 Feb 2017 19:12:46 GMT"
read [0x00] [0x0c] "content-type" [0x18] "text/html; charset=UTF-8"
read [0x00] [0x0e] "content-length" [0x02] "61"

# window frame
write [0x40 0x00 0x00 0x02]
write ${targetOutputEstId3}
write [0x00 0x02 0x00 0x00]
write flush

# data frame (with http payload)
read [0x00 0x00 0x00 0x02]
read ${targetOutputEstId3}
read [0x00 0x3e]
read "<html><head></head><body><h1>Push Response2</h1></body></html>"

# window frame
write [0x40 0x00 0x00 0x02]
write ${targetOutputEstId3}
write [0x00 0x02 0x00 0x00]
write flush

close
closed


#
#
# writing to target-->nukleus-->source (source/http2#target)
#
#

connect await HTTP_RESPONSE_HEADERS_RECEIVED
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceOutputEst.throttle)}
        option writer ${agrona:oneToOneWriter(sourceOutputEst.buffer)}
connected

# ========================== HTTP2 stream-id=1 =============================
# begin frame is already written (same tcp stream)
# nuklei data frame (contains http2 headers frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceOutputEstId}
write [0x00 0x61]
write [0x00 0x00 0x58]                                      # length
      [0x01]                                                # HTTP2 HEADERS frame
      [0x04]                                                # END_HEADERS
      [0x00 0x00 0x00 0x01]                                 # stream_id=1
      [0x88]                                                # :status: 200
      [0x0f 0x27] [0x14] "CERN/3.0 libwww/2.17"             # server
      [0x0f 0x12] [0x1d] "Wed, 01 Feb 2017 19:12:46 GMT"    # date
      [0x0f 0x10] [0x18] "text/html; charset=UTF-8"         # content-type
      [0x0f 0x0d] [0x02] "61"                               # content-length
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0..4]

write await HTTP_RESPONSE_PAYLOAD_RECEIVED

# nuklei data frame (contains first http2 PUSH_PROMISE frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceOutputEstId}
write [0x00 0x2b]
write [0x00 0x00 0x22]                          # length = 34
      [0x05]                                    # HTTP2 PUSH_PROMISE frame
      [0x04]                                    # END_HEADERS
      [0x00 0x00 0x00 0x01]                     # stream_id=1
      [0x00 0x00 0x00 0x02]                     # promised_stream_id=2
      [0x82]                                    # :method: GET
      [0x86]                                    # :scheme: http
      [0x04] [0x0a] "/resource1"                # :path: /resource1
      [0x01] [0x0e] "localhost:8080"            # :authority: localhost:8080
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0..4]

# nuklei data frame (contains second http2 PUSH_PROMISE frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceOutputEstId}
write [0x00 0x2b]
write [0x00 0x00 0x22]                          # length = 35
      [0x05]                                    # HTTP2 PUSH_PROMISE frame
      [0x04]                                    # END_HEADERS
      [0x00 0x00 0x00 0x01]                     # stream_id=1
      [0x00 0x00 0x00 0x04]                     # promised_stream_id=4
      [0x82]                                    # :method: GET
      [0x86]                                    # :scheme: http
      [0x04] [0x0a] "/resource2"                # :path: /resource2
      [0x01] [0x0e] "localhost:8080"            # :authority: localhost:8080
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0..4]

# nuklei data frame (contains http2 data frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceOutputEstId}
write [0x00 0x46]
write [0x00 0x00 0x3d]                          # length = 61
      [0x00]                                    # HTTP2 DATA frame
      [0x01]                                    # END_STREAM
      [0x00 0x00 0x00 0x01]                     # stream_id=1
write "<html><head></head><body><h1>404 Not Found</h1></body></html>"
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0..4]


# ==================== HTTP2 stream-id=2 (first promised stream) =================
write [0x00 0x00 0x00 0x02]
write ${newSourceOutputEstId}
write [0x00 0x61]
write [0x00 0x00 0x58]                                      # length
      [0x01]                                                # HTTP2 HEADERS frame
      [0x04]                                                # END_HEADERS
      [0x00 0x00 0x00 0x02]                                 # stream_id=2
      [0x88]                                                # :status: 200
      [0x0f 0x27] [0x14] "CERN/3.0 libwww/2.17"             # server
      [0x0f 0x12] [0x1d] "Wed, 01 Feb 2017 19:12:46 GMT"    # date
      [0x0f 0x10] [0x18] "text/html; charset=UTF-8"         # content-type
      [0x0f 0x0d] [0x02] "61"                               # content-length
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0..4]

# nuklei data frame (contains http2 data frame)
write [0x00 0x00 0x00 0x02]
write ${newSourceOutputEstId}
write [0x00 0x47]
write [0x00 0x00 0x3e]                          # length = 61
      [0x00]                                    # HTTP2 DATA frame
      [0x01]                                    # END_STREAM
      [0x00 0x00 0x00 0x02]                     # stream_id=2
write "<html><head></head><body><h1>Push Response1</h1></body></html>"
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0..4]


# ==================== HTTP2 stream-id=4 (second promised stream) ==============
write [0x00 0x00 0x00 0x02]
write ${sourceOutputEstId}
write [0x00 0x61]
write [0x00 0x00 0x58]                                      # length
      [0x01]                                                # HTTP2 HEADERS frame
      [0x04]                                                # END_HEADERS
      [0x00 0x00 0x00 0x04]                                 # stream_id=4
      [0x88]                                                # :status: 200
      [0x0f 0x27] [0x14] "CERN/3.0 libwww/2.17"             # server
      [0x0f 0x12] [0x1d] "Wed, 01 Feb 2017 19:12:46 GMT"    # date
      [0x0f 0x10] [0x18] "text/html; charset=UTF-8"         # content-type
      [0x0f 0x0d] [0x02] "61"                               # content-length
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${sourceOutputEstId}
read [0..4]

# nuklei data frame (contains http2 data frame)
write [0x00 0x00 0x00 0x02]
write ${sourceOutputEstId}
write [0x00 0x47]
write [0x00 0x00 0x3e]                          # length = 62
      [0x00]                                    # HTTP2 DATA frame
      [0x01]                                    # END_STREAM
      [0x00 0x00 0x00 0x04]                     # stream_id=4
write "<html><head></head><body><h1>Push Response2</h1></body></html>"
write flush

# window frame
read [0x40 0x00 0x00 0x02]
read ${sourceOutputEstId}
read [0..4]

close
closed
